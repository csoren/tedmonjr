; Copyright (c) 2023 Carsten Elton SÃ¸rensen
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
; 
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

		INCLUDE	"f256.i"
		INCLUDE "zeropage.i"
		INCLUDE	"monitorvectors.i"
		INCLUDE	"trampolinevectors.i"




		SECTION	"Trampoline",CODE[TRAMPOLINE_BASE]

; These lines must be kept in sync with declare.src and trampolinevectors.i
TrampolineVectors:
		jmp	LongJsr
		jmp	LongJump
		jmp	Initialize
		; fall-through to Trampoline

; ---------------------------------------------------------------------------
; -- Call into monitor
; -- Input:
; --   A - argument
; --   X - routine
; -- Output:
; --   A - result from routine
; --   X - destroyed
; ---------------------------------------------------------------------------
Trampoline:
		sei

		; save caller's A and X
		sta	user_a
		stx	user_x
		sty	user_y

		; save caller's IO ctrl register on caller stack
		lda	MMU_IO_CTRL
		pha

		; set monitor slot #7 to user slot #7
		lda	MMU_MEM_CTRL
		sta	user_mem_ctrl
		and	#MMU_ACT_LUT_MASK
		pha			; store user's LUT for later

		asl	#4		; active LUT into edit
		ora	MMU_MEM_CTRL
		ora	#MMU_EDIT_EN
		sta	MMU_MEM_CTRL	; edit user's LUT
		ldx	MMU_EDIT_BASE+7	; get user's slot #7

		pla			; restore user's LUT
		ora	#MMU_EDIT_EN|MMU_EDIT_LUT_3	; we want to edit LUT #3
		sta	MMU_MEM_CTRL	; activate LUT #3
		stx	MMU_EDIT_BASE+7	; set monitor's slot #7 to user's slot #7

		lda	#MMU_ACT_LUT_3
		sta	MMU_MEM_CTRL	; activate LUT #3

		; now in monitor land

		lda	user_a
		ldx	user_x
		ldy	user_y
		jsr	.call
		sta	user_a
		;stx	user_x
		;sty	user_y
		php
		pla
		sta	user_flags

		; back to caller
		lda	user_mem_ctrl
		sta	MMU_MEM_CTRL
		pla
		sta	MMU_IO_CTRL

		lda	user_flags
		pha
		lda	user_a
		pla	
		rts

.call		jmp	(MONITOR_VECTOR_BASE,x)
		rts


; ---------------------------------------------------------------------------
; -- Initialize LUT #3 for monitor
; -- Input:
; --   A - monitor bank #
; ---------------------------------------------------------------------------
Initialize:
		phx
		phy

		tay

		; save call config
		lda	MMU_MEM_CTRL
		pha

		; initialize MMU LUT 3
		and	#MMU_ACT_LUT_MASK
		ora	#MMU_EDIT_EN|MMU_EDIT_LUT_3
		sta	MMU_MEM_CTRL

		sty	MMU_EDIT_BASE+0
		stz	MMU_EDIT_BASE+7

		; restore user config
		pla
		sta	MMU_MEM_CTRL

		ldx	#monitor_Initialize
		jsr	Trampoline

		ply
		plx
		rts


; ---------------------------------------------------------------------------
; -- Long JSR and JMP
; ---------------------------------------------------------------------------
LongJump:
		lda	#$4C	; JMP abs
		bra	LongJsr\.entry
LongJsr:
		lda	#$20	; JSR abs
.entry		
		sta	.jump	; opcode
		lda	pcl
		sta	.jump+1
		lda	pch
		sta	.jump+2

		;tsx
		;stx	monsp

		lda	pcb
		sta	MMU_MEM_CTRL	; activate destination bank

		;ldx	sp
		;txs
		lda	flgs
		pha

		ldx	xr
		ldy	yr
		lda	acc

		plp

.jump		jsr	$FFFF

		sta	user_a
		php
		pla
		sta	user_flags

		lda	#MMU_ACT_LUT_3
		sta	MMU_MEM_CTRL	; activate monitor bank

		stx	xr
		sty	yr
		lda	user_a
		sta	acc
		lda	user_flags
		sta	flgs

		;tsx
		;stx	sp

		;ldx	monsp
		;txs

		rts



; ---------------------------------------------------------------------------
; -- Variables
; ---------------------------------------------------------------------------
user_a		DB	0
user_x		DB	0
user_y		DB	0
user_flags	DB	0
user_mem_ctrl	DB	0
