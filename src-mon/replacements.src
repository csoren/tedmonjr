; Copyright (c) 2023 Carsten Elton SÃ¸rensen
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
; 
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

; ---------------------------------------------------------------------------
; -- Print immediate text following return address
; -- All registers preserved
; ---------------------------------------------------------------------------
primm:
		sty	r0

		ply
		sty	r2
		ply
		sty	r3

		pha
		phx

		bra	.inc

.loop		lda	(r2)
		beq	.done

		jsr	text_CharOut

.inc		inc	r2
		bne	.loop
		inc	r3
		bra	.loop

.done		plx
		pla

		ldy	r3
		phy
		ldy	r2
		phy

		ldy	r0
		
		rts


; ---------------------------------------------------------------------------
; -- Print character
; -- Input:
; --   A - Character
; ---------------------------------------------------------------------------
bsout:		pha
		phx
		phy

		jsr	text_CharOut

		ply
		plx
		pla
		rts


; ---------------------------------------------------------------------------
; -- Fetch byte from memory
; -- Input:
; --   A - ZP address of memory location
; --   X - LUT # (0-3)
; --   Y - memory index
; ---------------------------------------------------------------------------
_fetch:
		phx
		phy

		; set supplied LUT as editable
		pha
		txa
		and	#$03
		asl	#4
		ora	#MMU_EDIT_EN|MMU_ACT_LUT_3
		sta	MMU_MEM_CTRL
		pla

		; read bank number from LUT
		tax
		lda	0,x	; low bytes of address
		sta	r0
		lda	1,x	; high byte of address
		sta	r1

		; increment 

		lda	r1
		lsr	#5	; A = slot
		tax
		ldy	MMU_EDIT_BASE,x		; Y = bank number

		; set address' bank number in our slot #1
		lda	#MMU_EDIT_EN|MMU_ACT_LUT_3|MMU_EDIT_LUT_3
		sta	MMU_MEM_CTRL
		lda	MMU_EDIT_BASE+1
		sty	MMU_EDIT_BASE+1

		; restore index
		ply
		phy

		; save slot #1 bank
		pha

		; read byte
		lda	r1
		and	#$1F	; remove slot bits
		ora	#$20	; set slot 
		sta	r1
		lda	(r0),y
		tay		; y = byte

		; restore MMU config
		pla
		sta	MMU_EDIT_BASE+1
		lda	#MMU_ACT_LUT_3
		sta	MMU_MEM_CTRL

		tya
		ply
		plx

		rts


; ---------------------------------------------------------------------------
; -- Store byte in memory
; -- Input:
; --   (stavec) - ZP address of memory location
; --   A - byte
; --   X - LUT # (0-3)
; --   Y - memory index
; ---------------------------------------------------------------------------
_stash:
		phx
		phy

		sta	r2

		; set supplied LUT as editable
		
		txa
		and	#$03
		asl	#4
		ora	#MMU_EDIT_EN|MMU_ACT_LUT_3
		sta	MMU_MEM_CTRL

		; read bank number from LUT
		ldx	stavec
		lda	0,x	; low bytes of address
		sta	r0
		lda	1,x	; high byte of address
		sta	r1

		; increment 

		lda	r1
		lsr	#5	; A = slot
		tax
		ldy	MMU_EDIT_BASE,x		; Y = bank number

		; set address' bank number in our slot #1
		lda	#MMU_EDIT_EN|MMU_ACT_LUT_3|MMU_EDIT_LUT_3
		sta	MMU_MEM_CTRL
		lda	MMU_EDIT_BASE+1
		sty	MMU_EDIT_BASE+1

		; restore index
		ply
		phy

		; save slot #1 bank
		pha

		; store byte
		lda	r1
		and	#$1F	; remove slot bits
		ora	#$20	; set slot 
		sta	r1
		lda	r2
		sta	(r0),y

		; restore MMU config
		pla
		sta	MMU_EDIT_BASE+1
		lda	#MMU_ACT_LUT_3
		sta	MMU_MEM_CTRL

		ply
		plx

		rts


; ---------------------------------------------------------------------------
; -- Compare byte in memory
; -- Input:
; --   cmpvec - ZP address of memory location
; --   A - byte
; --   X - LUT # (0-3)
; --   Y - memory index
; ---------------------------------------------------------------------------
_cmpar:
		pha

		lda	cmpvec
		jsr	_fetch
		sta	r0

		pla
		cmp	r0

		rts
