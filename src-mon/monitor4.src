;	.page
;	.subttl  monitor4 - disassembler

;***************************************************
;
;	Mini disassembler
;
;***************************************************

disasm
	bcs 1$		;use a default length from current sa
	jsr t0tot2
	jsr parse
	bcc 2$		;got sa,ea. use 'em

1$	lda #20	  	;guess at 1/2 page
	sta t0
	bne 3$

2$	jsr sub0m2      ;put ea-sa in t0
	bcc 5$		;...branch if sa > ea

3$	jsr primm	;print <cr> & delete to end of line for neatness
	DB cr,0	;cr,$1b,'Q',0
	jsr stop
	beq 4$		;...branch if user requests abort
	jsr dis300      ;disassemble 1 line
	inc length
	lda length
	jsr addt2
	lda length
	jsr subt0
	bcs 3$
4$	jmp main

5$	jmp error


dis300
	lda #'.'
	jsr bsout
	jsr putspc
dis400
	jsr putt2
	jsr putspc
	ldy #0
	jsr fetch	;get a byte from memory
	jsr dset	;get instr & digest it

	pha	      	;dump (length+1) bytes
	ldx length      ;(.y=0 from 'dset' above)
	inx
pradr0
	dex
	bpl pradrl      ;pad non-printers
	jsr primm	;print 3 spaces
	DB '   ',0
	jmp pradrm
pradrl
	jsr fetch
	jsr puthxs
pradrm
	iny
	cpy #3
	bcc pradr0
	pla

	ldx #3
	jsr prmne	;print mnemonic
	ldx #6	   	;6 format bits
pradr1
	cpx #3
	bne pradr3     	;if x=3 print adr val
	ldy length
	beq pradr3     	;no print if len=0
pradr2
	lda format
	cmp #$e8 	;relative addressing mode?
	php		;save carry
	jsr fetch
	plp
	bcs reladr
	jsr puthex
	dey
	bne pradr2
pradr3
	asl format	;test next format bit
	bcc pradr4	;no print if=0
	lda char1-1,x
	jsr bsout
	lda char2-1,x
	beq pradr4
	jsr bsout
pradr4
	dex
	bne pradr1
	rts


reladr
	jsr pcadj3	;pcl,h + disp + 1 into a,x
	clc	      	;add 1
	adc #1
	bne relad2
	inx
relad2
	jmp putwrd


pcadj3
	ldx t2+1
	tay
	bpl pcadj4
	dex
pcadj4
	adc t2
	bcc pcrts
	inx
pcrts
	rts



; disassembler digest routine
;
dset
	tay
	lsr a	    	;even/odd test
	bcc ieven
	lsr a	    	;test b1
	bcs err	  	;xxxxxx11 instr bad
	cmp #$22
	beq err	  	;10001001 instr bad
	and #$07	;mask 3 bits for adr mode
	ora #$80 	;add indexing offset
ieven
	lsr a	    	;left/right test
	tax
	lda nmode,x	;index into mode table
	bcs rtmode 	;if carry set use lsb for
	lsr a	    	;print format index
	lsr a
	lsr a	    	;if carry clr use msb
	lsr a
rtmode
	and #$0f	;mask for 4-bit index
	bne getfmt	;$0 for bad opcodes
err
	ldy #$80	;sub $80 for bad opcode
	lda #0	   	;set format index to zero
getfmt
	tax
	lda nmode2,x	;index into prt format tab
	sta format	;save for adr field format
	and #3	   	;mask 2-bit length. 0=1byte
	sta length	;1=2byte,2=3byte
	tya	      	;op code
	and #$8f	;mask for 1xxx1010 test
	tax	      	;save in x
	tya	      	;op code again
	ldy #3
	cpx #$8a
	beq mnndx3
mnndx1
	lsr a
	bcc mnndx3	;form index into mnemonic tab
	lsr a
mnndx2
	lsr a	    	;1xxx1010->00101xxx
	ora #$20	;xxxyyy01->00111xxx
	dey	      	;xxxyyy10->00110xxx
	bne mnndx2	;xxxyy100->00100xxx
	iny	      	;xxxxx000->000xxxxx
mnndx3
	dey
	bne mnndx1
	rts	      	;(.y=0 is assumed!)



; print mnemonic
; enter x=3 characters
;
prmne
	tay
	lda mneml,y	;fetch 3 char mnemonic
	sta t1
	lda mnemr,y
	sta t1+1
prmn1
	lda #0
	ldy #5
prmn2
	asl t1+1	;shift 5 bits of char
	rol t1	   	;into a
	rol a	    	;clear carry
	dey
	bne prmn2
	adc #$3f	;add '?' offset
	jsr bsout
	dex
	bne prmn1
	jmp putspc	;finish with space


nmode
	DB $40,2,$45,3
	DB $d0,8,$40,9
	DB $30,$22,$45,$33
	DB $d0,8,$40,9
	DB $40,2,$45,$33
	DB $d0,8,$40,9
	DB $40,$02,$45,$b3
	DB $d0,$08,$40,$09
	DB 0,$22,$44,$33
	DB $d0,$8c,$44,0
	DB $11,$22,$44,$33
	DB $d0,$8c,$44,$9a
	DB $10,$22,$44,$33
	DB $d0,8,$40,9
	DB $10,$22,$44,$33
	DB $d0,8,$40,9
	DB $62,$13,$78,$a9
nmode2
	DB 0,$21,$81,$82
	DB 0,0,$59,$4d
	DB $91,$92,$86,$4a
	DB $85,$9d
char1
	DB ",),#($"
char2
	DB "Y",0,"X$$",0
mneml
	DB $1c,$8a,$1c,$23
	DB $5d,$8b,$1b,$a1
	DB $9d,$8a,$1d,$23
	DB $9d,$8b,$1d,$a1
	DB 0,$29,$19,$ae
	DB $69,$a8,$19,$23
	DB $24,$53,$1b,$23
	DB $24,$53,$19,$a1
	DB 0,$1a,$5b,$5b
	DB $a5,$69,$24,$24
	DB $ae,$ae,$a8,$ad
	DB $29,0,$7c,0
	DB $15,$9c,$6d,$9c
	DB $a5,$69,$29,$53
	DB $84,$13,$34,$11
	DB $a5,$69,$23,$a0
mnemr
	DB $d8,$62,$5a,$48
	DB $26,$62,$94,$88
	DB $54,$44,$c8,$54
	DB $68,$44,$e8,$94
	DB 0,$b4,8,$84
	DB $74,$b4,$28,$6e
	DB $74,$f4,$cc,$4a
	DB $72,$f2,$a4,$8a
	DB 0,$aa,$a2,$a2
	DB $74,$74,$74,$72
	DB $44,$68,$b2,$32
	DB $b2,0,$22,0
	DB $1a,$1a,$26,$26
	DB $72,$72,$88,$c8
	DB $c4,$ca,$26,$48
	DB $44,$44,$a2,$c8
regk
	DB cr,$20,$20,$20

;.end
